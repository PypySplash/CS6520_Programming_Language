#lang shplait

type Value
| boolV(b :: Boolean)
| intV(n :: Int)
| closV(arg :: Symbol, // A closure conbines an expression with an environment
        body :: Exp,
        env :: Env)
| thunkV(body :: Exp, env :: Env)  // 將 thunkV 作為 Value 的一種

type Exp
| intE(n :: Int)
| idE(s :: Symbol)
| plusE(l :: Exp,
        r :: Exp)
| multE(l :: Exp,
        r :: Exp)
| letE(n :: Symbol,
       rhs :: Exp,
       body :: Exp)
| funE(n :: Symbol,
       body :: Exp)
| appE(fn :: Exp,
       arg :: Exp)
| trueE()
| falseE()
| eqE(l :: Exp, r :: Exp)
| ifE(condE :: Exp, thenE :: Exp, elseE :: Exp)
| renameE(old :: Symbol,
          new :: Symbol,
          body :: Exp)

| delayE(body :: Exp)
| forceE(thunk :: Exp)
  
type Binding
| bind(name :: Symbol,
       val :: Value)

type Env = Listof(Binding)

def mt_env = []
def extend_env = cons

fun eval_exp(exp :: Exp) :: Exp:  // helper function for eqE in parse
  match exp
  | intE(n): intE(n)
  | plusE(l, r):
      def left_val = eval_exp(l)
      def right_val = eval_exp(r)
      match left_val
      | intE(n1):
          match right_val
          | intE(n2):
              intE(n1 + n2)
          | ~else:
              error(#'eval_exp, "not a number")
      | ~else:
          error(#'eval_exp, "not a number")
  | multE(l, r):
      def left_val = eval_exp(l)
      def right_val = eval_exp(r)
      match left_val
      | intE(n1):
          match right_val
          | intE(n2):
              intE(n1 * n2)
          | ~else:
              error(#'eval_exp, "not a number")
      | ~else:
          error(#'eval_exp, "not a number")
  | ~else:
      error(#'eval_exp, "not a number")


// parse ----------------------------------------
fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | syntax_is_symbol(s):
      idE(syntax_to_symbol(s))
  | s == '#true':  // trueE
      trueE()
  | s == '#false':  // falseE
      falseE()
  | ~else:
      match s
      | 'delay: $body':
          delayE(parse(body))
      | 'force($thunk_exp)':
          forceE(parse(thunk_exp))
      | 'if $condE | $thenE | $elseE':  // ifE
          def cond_exp = parse(condE)
          match cond_exp
          | trueE():
              parse(thenE)
          | falseE():
              parse(elseE)
          | ~else:
              error(#'parse, "not a boolean")
            
      | '$left == $right':  // eqE
          def left_exp = eval_exp(parse(left))
          def right_exp = eval_exp(parse(right))
          
          match left_exp
          | intE(n1):
              match right_exp
              | intE(n2):
                  if n1 == n2:
                  | parse('#true')
                  | parse('#false')
              | ~else:
                  error(#'parse, "not a number")
          | ~else:
              error(#'parse, "not a number")

      | 'let $name = $rhs:
           $body':
          letE(syntax_to_symbol(name),
               parse(rhs),
               parse(body))
      | '$left + $right':
          plusE(parse(left),
                parse(right))
      | '$left * $right':
          multE(parse(left),
                parse(right))
      | 'fun ($id): $body':
          funE(syntax_to_symbol(id),
               parse(body))
      | '$fn($arg)':
          appE(parse(fn),
               parse(arg))
      | '($e)':
          parse(e)
      | 'rename $old to $new: $body':
          renameE(syntax_to_symbol(old),
                  syntax_to_symbol(new),
                  parse(body))

      | ~else:
          error(#'parse, "invalid input: " +& s)

//check: parse('let x = 1: rename x to y: y')
//       ~is parse('1')


check: parse('1 + 2 == 3')
       ~is parse('#true')
check: parse('1 + 2 == 4')
       ~is parse('#false')     
check: parse('if 2 == 1 + 1 | 7 | 8')
       ~is parse('7')
check: parse('if 3 == 1 + 1 | 7 | 8')
       ~is parse('8')
check: parse('if #false | 1 + (fun (x): x) | 9')
       ~is parse('9')
check: parse('if #true | 10 | 1 + (fun (x): x)')
       ~is parse('10')
check: parse('1 + 2 == a')
       ~raises "not a number"
check: parse('a == 1 + 2')
       ~raises "not a number"

check: parse('3 * 3 == 9')
       ~is parse('#true')
check: parse('3 * 3 == 10')
       ~is parse('#false')
check: parse('if 4 == 2 * 2 | 7 | 8')
       ~is parse('7')
check: parse('if 5 == 2 * 2 | 7 | 8')
       ~is parse('8')
check: parse('3 * 3 == a')
       ~raises "not a number"
check: parse('a == 3 * 3')
       ~raises "not a number"
       
module test:
  check: parse('2')
         ~is intE(2)
  check: parse('x')
         ~is idE(#'x)
  check: parse('2 + 1')
         ~is plusE(intE(2), intE (1))
  check: parse('3 * 4')
         ~is multE(intE(3), intE(4))
  check: parse('3 * 4 + 8')
         ~is plusE(multE(intE(3), intE(4)),
                   intE(8))
  check: parse('fun (x): 9')
         ~is funE(#'x, intE(9))
  check: parse('double(9)')
         ~is appE(idE(#'double), intE(9))
  check: parse('1 + double(9)')
         ~is plusE(intE(1),
                   appE(idE(#'double), intE(9)))
  check: parse('3 * (4 + 8)')
         ~is multE(intE(3),
                   plusE(intE(4), intE(8)))
  check: parse('let x = 1 + 2:
                  y')
         ~is letE(#'x,
                  plusE(intE(1), intE(2)),
                  idE(#'y))
  check: parse('1 2')
         ~raises "invalid input"

fun remove_binding(n :: Symbol, env :: Env) :: Env:
  match env
  | []: []  
  | cons(b, rst_env):
      if n == bind.name(b):
      | rst_env
      | cons(b, remove_binding(n, rst_env))

// interp ----------------------------------------
fun interp(a :: Exp, env :: Env) :: Value:
  match a
  | trueE(): boolV(#true)
  | falseE(): boolV(#false)
  | intE(n): intV(n)
  | idE(s): lookup(s, env)
  | plusE(l, r): num_plus(interp(l, env), interp(r, env))
  | multE(l, r): num_mult(interp(l, env), interp(r, env))
  | letE(n, rhs, body):
      def rhs_v = interp(rhs, env)
      interp(body,
             extend_env(bind(n, rhs_v),
                        env))
  | funE(n, body): closV(n, body, env)
  | appE(fn, arg):
      match interp(fn, env)
      | closV(n, body, c_env):
          interp(body,
                 extend_env(bind(n, interp(arg, env)),
                            c_env))
      | ~else: error(#'interp, "not a function")
  | renameE(old, new, body):
      def old_one = lookup(old, env)
      def new_env = extend_env(bind(new, old_one), env)
      def final_env = remove_binding(old, new_env)
      interp(body, final_env)
      
  | delayE(body):
      // 返回封裝了表達式和環境的 Thunk
      thunkV(body, env)

  | forceE(thunk_exp):
      match interp(thunk_exp, env)  // 先解釋 thunk_exp
      | thunkV(body, thunk_env):
          // 如果是 Thunk,則解釋其表達式
          interp(body, thunk_env)
      | ~else:
          // 如果不是 Thunk,則報錯
          error(#'forceE, "not a thunk")

  | eqE(l, r):
      ....
  | ifE(condE, thenE, elseE):
      ....


check: interp(parse('1 + 2 == 3'), mt_env)
       ~is interp(parse('#true'), mt_env)
check: interp(parse('if 2 == 1 + 1 | 7 | 8'), mt_env)
       ~is interp(parse('7'), mt_env)
check: interp(parse('if #false | 1 + (fun (x): x) | 9'), mt_env)
       ~is interp(parse('9'), mt_env)
check: interp(parse('if #true | 10 | 1 + (fun (x): x)'), mt_env)
       ~is interp(parse('10'), mt_env)
check: interp(parse('if 1 | 2 | 3'), mt_env)
       ~raises "not a boolean"

module test:
  check: interp(parse('2'), mt_env)
         ~is intV(2)
  check: interp(parse('x'), mt_env)
         ~raises "free variable"
  check: interp(parse('x'),
                extend_env(bind(#'x, intV(9)), mt_env))
         ~is intV(9)
  check: interp(parse('2 + 1'), mt_env)
         ~is intV(3)
  check: interp(parse('2 * 1'), mt_env)
         ~is intV(2)
  check: interp(parse('(2 * 3) + (5 + 8)'), mt_env)
         ~is intV(19)
  check: interp(parse('fun (x): x + x'),
                mt_env)
         ~is closV(#'x, plusE(idE(#'x), idE(#'x)), mt_env)
  check: interp(parse('let x = 5: x + x'),
                mt_env)
         ~is intV(10)
  check: interp(parse('let x = 5:
                         let x = x + 1:
                           x + x'),
                mt_env)
         ~is intV(12)
  check: interp(parse('let x = 5:
                         let y = 6:
                           x'),
                mt_env)
         ~is intV(5)
  check: interp(parse('(fun (x): x + x)(8)'),
                mt_env)
         ~is intV(16)
  check: interp(parse('1(2)'), mt_env)
         ~raises "not a function"
  check: interp(parse('1 + (fun (x): x)'), mt_env)
         ~raises "not a number"
  check: interp(parse('let bad = (fun (x): x + y):
                         let y = 5:
                           bad(2)'),
                mt_env)
         ~raises "free variable"

  check: interp(parse('force(1)'),
                mt_env)
         ~raises "not a thunk"
  check: interp(parse('force(if 8 == 8 | (delay: 7) | (delay: 9))'),
                mt_env)
         ~is interp(parse('7'),
                    mt_env)
  check: interp(parse('let d = (let y = 8:
                                  delay: y + 7):
                         let y = 9:
                           force(d)'),
                mt_env)
         ~is interp(parse('15'),
                    mt_env)

  #//
  time:
    interp(parse('let x2 = (fun (n): n + n):
                    let x4 = (fun (n): x2(x2(n))):
                      let x16 = (fun (n): x4(x4(n))):
                        let x256 = (fun (n): x16(x16(n))):
                          let x65536 = (fun (n): x256(x256(n))):
                            x65536(1)'),
           mt_env)    
               
// num_plus and num_mult ----------------------------------------
fun num_op(op :: (Int, Int) -> Int, l :: Value, r :: Value) :: Value:
  cond
  | l is_a intV && r is_a intV:
      intV(op(intV.n(l), intV.n(r)))
  | ~else:
      error(#'interp, "not a number")
fun num_plus(l :: Value, r :: Value) :: Value:
  num_op(fun (a, b): a+b, l, r)
fun num_mult(l :: Value, r :: Value) :: Value:
  num_op(fun (a, b): a*b, l, r)

module test:
  check: num_plus(intV(1), intV(2))
         ~is intV(3)
  check: num_mult(intV(3), intV(2))
         ~is intV(6)
  
// lookup ----------------------------------------
fun lookup(n :: Symbol, env :: Env) :: Value:
  match env
  | []: error(#'lookup, "free variable")
  | cons(b, rst_env):
      cond
      | n == bind.name(b):
          bind.val(b)
      | ~else:
          lookup(n, rst_env)

module test:
  check: lookup(#'x, mt_env)
         ~raises "free variable"
  check: lookup(#'x, extend_env(bind(#'x, intV(8)), mt_env))
         ~is intV(8)
  check: lookup(#'x, extend_env(bind(#'x, intV(9)),
                                extend_env(bind(#'x, intV(8)),
                                           mt_env)))
         ~is intV(9)
  check: lookup(#'y, extend_env(bind(#'x, intV(9)),
                                extend_env(bind(#'y, intV(8)),
                                           mt_env)))
         ~is intV(8)

  check: interp(parse('let x = 1:
                         rename x to y:
                           y'),
                mt_env)
         ~is interp(parse('1'), mt_env)
  check: interp(parse('let x = 1:
                         rename y to x:
                           x'),
                mt_env)
         ~raises "free variable"
  check: interp(parse('let x = 1:
                         rename x to y:
                           x'),
                mt_env)
         ~raises "free variable"
  check: interp(parse('let x = 1:
                         x + (rename x to y:
                                1)'),
                mt_env)
         ~is interp(parse('2'), mt_env)
  check: interp(parse('let x = 1:
                         x + (rename x to y:
                                y)'),
                mt_env)
         ~is interp(parse('2'), mt_env)
  check: interp(parse('let x = 1:
                         (rename x to y:
                           y) + x'),
                mt_env)
         ~is interp(parse('2'), mt_env)
  check: interp(parse('let x = 2:
                         let x = 1:
                            x + (rename x to y:
                                   x)'),
                mt_env)
         ~is interp(parse('3'), mt_env)
  check: interp(parse('let x = 1:
                         let x = 2:
                           let z = 3:
                              x + (rename x to y:
                                     x + z)'),
                mt_env)
         ~is interp(parse('6'), mt_env)
  check: interp(parse('let f = (fun (z):
                                  let z = 8:
                                    rename z to x:
                                      z):
                         f(2)'),
                mt_env)
         ~is interp(parse('2'), mt_env)
